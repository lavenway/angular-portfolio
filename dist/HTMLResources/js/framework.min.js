function animations() {

  //Default configurations
  var defaultTitle = {
    distance : '200%',
    easing   : 'ease-in-out',
    mobile   : false,
    reset    : true,
    opacity  : 1,
    origin   : 'left',
    scale    : 1
  };

  //Section configurations
  var homeLogo = {
    easing   : 'ease-in-out',
    mobile   : false,
    opacity  : 0,
    scale    : 0.8,
    reset    : true,
    viewOffset: { top: 300 }
  };

  var homeText = {
    easing   : 'ease-in-out',
    mobile   : false,
    opacity  : 0,
    reset    : true,
    scale    : 1,
    viewOffset: { top: 300 }
  };

  var workItems = {
    distance : '-40px',
    easing   : 'ease-in-out',
    mobile   : false,
    reset    : true,
    origin   : 'bottom'
  };

  var aboutText = {
    distance : '-200%',
    easing   : 'ease-in-out',
    mobile   : false,
    reset    : true,
    origin   : 'left'
  };

  var aboutLogo = {
    easing   : 'ease-in-out',
    mobile   : false,
    opacity  : 0,
    reset    : true,
  };

  var testimonialItems = {
    distance : '-200%',
    easing   : 'ease-in-out',
    mobile   : false,
    reset    : true,
    opacity  : 1,
    origin   : 'right',
    scale    : 1
  };

  var contactForm = {
    distance : '-100%',
    easing   : 'ease-in-out',
    mobile   : false,
    reset    : true,
    opacity  : 1,
    origin   : 'top',
    scale    : 1
  };

  //Initialise the plugin
  window.sr = ScrollReveal();

  //Default
  sr.reveal('.section h2', defaultTitle);

  //Section One
  sr.reveal('.section.home .wl-logo', homeLogo);
  sr.reveal('.section.home .text', homeText);

  //Section Two
  sr.reveal('.section.work .active .logo', workItems);

  //Section Three
  sr.reveal('.section.about .active .logo', aboutLogo);
  sr.reveal('.section.about .active .details', aboutText);

  //Section Four
  sr.reveal('.section.testimonial .items', testimonialItems);

  //Section Five
  sr.reveal('.section.contact .contact-form', contactForm);

}
// IIFE - Immediately Invoked Function Expression
(function(portfolio) {
  'use strict';

  //console.log('portfolio');
  // The global jQuery object is passed as a parameter
  portfolio(window.jQuery, window, document);

  }(function($, window, document) {
      'use strict';

      //console.log('window, document');
      // The $ is now locally scoped 
      $(function() {
          // The DOM is ready!
          //console.log('inner function from window, document');
          // This is needed to prevent onreadystatechange being run twice
          var ready = false;

          document.onreadystatechange = function() {
            //console.log('onreadystatechange');
            if (ready) {
              return;
            }
            
            // interactive = DOMContentLoaded & complete = window.load
            if (document.readyState == 'interactive' || document.readyState == 'complete') {
              ready = true;

              // LOAD THE PAGE ANIMATIONS
              setTimeout( function() {
                animations();
              }, 700);
            }
          };
      });

      // The rest of your code goes here!
      // Variables
      var body = $('body'),
          desktopDevice = 'desktop-viewport',
          mobileDevice = 'mobile-viewport',
          $mobileHiddenNav = $('.navbar-links'),
          $mobileMenuToggle = $('.mobile-menu'),
          $mobileMenulinkClose = $('.navbar a'),
          $portfolioAnchor = $('.portfolio-link'),
          tabletDevice = 'tablet-viewport',

          handleMobileNavToggle = function () {
            body.toggleClass('navbar-active');

            $mobileHiddenNav.toggle();
          },

          handleMobileNavClose = function () {

            if(body.hasClass(mobileDevice)) {
              body.removeClass('navbar-active');

              $mobileHiddenNav.hide();
            }
            
          },

          handleScrollDetection = function () {

            body.addClass('scroll-active');

            clearTimeout($.data(this, 'scrollTimer'));

            $.data(this, 'scrollTimer', setTimeout(function() {
                body.removeClass('scroll-active');
            }, 500));

          },

          handlePortfolioAnchor = function () {

            $('html,body').animate({
              scrollTop: $('.section.work').offset().top
            });

          };

      enquire.register('screen and (max-width:480px)', {
        // OPTIONAL
        // If supplied, triggered when a media query matches.
        match : function() {
          body.addClass(mobileDevice);
        },      
                                    
        // OPTIONAL
        // If supplied, triggered when the media query transitions 
        // *from a matched state to an unmatched state*.
        unmatch : function() {
          body.removeClass(mobileDevice);
        },    
        
        // OPTIONAL
        // If supplied, triggered once, when the handler is registered.
        setup : function() {},    
                                    
        // OPTIONAL, defaults to false
        // If set to true, defers execution of the setup function 
        // until the first time the media query is matched
        deferSetup : true,
                                    
        // OPTIONAL
        // If supplied, triggered when handler is unregistered. 
        // Place cleanup code here
        destroy : function() {}         
      });

      enquire.register('screen and (min-width:481px) and (max-width:1023px)', {
        // OPTIONAL
        // If supplied, triggered when a media query matches.
        match : function() {       
          body.addClass(tabletDevice);
          $mobileHiddenNav.removeAttr('style');
        }, 

        // OPTIONAL
        // If supplied, triggered when the media query transitions 
        // *from a matched state to an unmatched state*.
        unmatch : function() {
          body.removeClass(tabletDevice);
        },

        // OPTIONAL
        // If supplied, triggered once, when the handler is registered.
        setup : function() {},    
                                    
        // OPTIONAL, defaults to false
        // If set to true, defers execution of the setup function 
        // until the first time the media query is matched
        deferSetup : true,
                                    
        // OPTIONAL
        // If supplied, triggered when handler is unregistered. 
        // Place cleanup code here
        destroy : function() {}
      });

      enquire.register('screen and (min-width:1024px)', {
        // OPTIONAL
        // If supplied, triggered when a media query matches.
        match : function() {
          body.addClass(desktopDevice);
          $mobileHiddenNav.removeAttr('style');
        }, 

        // OPTIONAL
        // If supplied, triggered when the media query transitions 
        // *from a matched state to an unmatched state*.
        unmatch : function() {  
          body.removeClass(desktopDevice);
        },

        // OPTIONAL
        // If supplied, triggered once, when the handler is registered.
        setup : function() {},    
                                    
        // OPTIONAL, defaults to false
        // If set to true, defers execution of the setup function 
        // until the first time the media query is matched
        deferSetup : true,
                                    
        // OPTIONAL
        // If supplied, triggered when handler is unregistered. 
        // Place cleanup code here
        destroy : function() {}
      });

      // MOBILE NAV TOGGLE MENU
      $mobileMenuToggle.on('click', handleMobileNavToggle);

      // MOBILE NAV LINK CLOSE MENU
      $mobileMenulinkClose.on('click', handleMobileNavClose);

      //SCROLL TO PORTFOLIO ANCHOR
      $portfolioAnchor.on('click', handlePortfolioAnchor);

      // WINDOW SCROLL DETECTION
      $(window).on('scroll', handleScrollDetection);

  }
));
(function() {

	'use strict';

	angular
		.module('folioFramework', ['ngSanitize']);

})();
(function() {

	'use strict';

	function FolioController(dataService, $http) {
		// VM = Virtual model
		var vm = this,
				$body = $('body'),
				desktopDevice = 'desktop-viewport',
				$fullPageOptionsTouchDevice = {
          anchors: ['firstPage', 'secondPage', 'thirdPage', 'fourthPage', 'lastPage'],
          controlArrows: true,
          autoScrolling: false,
          fitToSection: false,
          fixedElements: '.navbar, .work-details',
          menu: '#menu',
          responsiveHeight: '768',
          slidesNavigation: false,
          slidesNavPosition: 'bottom',
          afterResize: function(){
            //console.log('after resize');
            $.fn.fullpage.destroy('all');
            calculateNumberofSlides();
            initializeFullpage();
          }
        },
        $fullPageOptionsDesktop = {
          anchors: ['firstPage', 'secondPage', 'thirdPage', 'fourthPage', 'lastPage'],
          controlArrows: true,
          autoScrolling: false,
          scrollBar: true,
          fitToSection: false,
          fixedElements: '.navbar, .work-details',
          menu: '#menu',
          navigation: true,
          navigationPosition: 'left',
          responsiveHeight: '768',
          slidesNavigation: false,
          slidesNavPosition: 'bottom',
          afterResize: function(){
            //console.log('after resize');
            $.fn.fullpage.destroy('all');
            calculateNumberofSlides();
            initializeFullpage();
          }
        },
        $fullPage = $('#fullpage'),
        maxNumberOfItems,
				mobileDevice = 'mobile-viewport',
        randomNumber = Math.floor(Math.random()*8999+1000),
        //resizeId,
        tabletDevice = 'tablet-viewport',
        panelActive = false,
        workItemID = 0,
        workItemIndex = 0;

    //Setup full page
    function initializeFullpage() {

      // This will only run after the ng-repeat has rendered its things to the DOM
      setTimeout(function() {
        //console.log('initialise plugin');

        if($body.hasClass(desktopDevice)){
          //console.log('DESKTOP');
          $fullPage.fullpage($fullPageOptionsDesktop);
        } else {
          //console.log('TOUCH DEVICE');
          $fullPage.fullpage($fullPageOptionsTouchDevice);
        }
        
      }, 500); // wait...

    }

    //Window resizing finished
    /*function doneWindowResize(){
      console.log('window resize finished');
      calculateNumberofSlides();
      initializeFullpage();
    }*/

    //Work Section - Wrap every 'X' number of work items to force slider
    function numberOfSlides() {
      
      //console.log('numberOfSlides() - setup new HTML');

      var workItemSlider = $('.section.work .container .items'),
          workItemSlides = $('.section.work .container .slide');

          //console.log('number of work items ' + workItemSlider.length);

      function buildSlideHTML() {
        //console.log('building the html');

        for(var i = 0; i < workItemSlider.length; i+=maxNumberOfItems) {
          //console.log('loop the items and wrap with new HTML');
          workItemSlider.slice(i, i+maxNumberOfItems).wrapAll('<div class="slide"></div>');
        }

        //console.log(workItemSlider.length);
        //console.log('number of work slides ' + workItemSlides.length);

      }

      function destroySlideHTML() {
        //console.log('destroy existing HTML');

        /*$(workItemSlides).replaceWith(function() {
         return $(workItemSlider, this);
        });*/

        workItemSlides.replaceWith(function() {
         return workItemSlider;
        });

        buildSlideHTML();
      }

      // If the work items are wrapped in the 'slide' HTML then destroy, otherwise rebuild
      if(workItemSlides.length) {
        //console.log('destroy');
        destroySlideHTML();
      } else {
        //console.log('build');
        buildSlideHTML();
      }

    }

    // Calculate number of slides required for the work section
    function calculateNumberofSlides() {

      // This will only run after the ng-repeat has rendered its things to the DOM
      setTimeout(function() {
        //console.log('calculate number of slides');

        if ($body.hasClass(mobileDevice)) {
          maxNumberOfItems = 6;
          //console.log('mobile device - set max number of items to ' + maxNumberOfItems);
        } else if ($body.hasClass(tabletDevice)) {
          maxNumberOfItems = 9;
          //console.log('tablet device - set max number of items to ' + maxNumberOfItems);
        } else if ($body.hasClass(desktopDevice)) {
          maxNumberOfItems = 12;
          //console.log('desktop device - set max number of items to ' + maxNumberOfItems);
        }

        numberOfSlides();

        return;
        
      }, 500); // wait...

    }

    //Get work item details
    function getWorkItemDetails(workItem) {

      if (panelActive === true) {

        if (workItem !== undefined) {
          //console.log(workItem.itemId);
          return workItem.itemId == workItemID;
        }

      }

    }

    //Set the ID of the clicked work item
    function setWorkItemDetailsId(work) {

      workItemID = work.itemId;

      //console.log('work item id is: ' + work.itemId);

      //document.getElementById('jsonWorkID').value = workItemID;

      getWorkItemDetails();

    }

    //Open work item details panel
    function openWorkItemDetailsPanel($event) {
      
      $event.preventDefault();

      panelActive = true;

      //console.log(panelActive);

    }

    //Close work item details panel
    function closeWorkItemDetailsPanel($event) {
      
      $event.preventDefault();

      panelActive = false;

    }

    //Show specific details of thumbnail
    function updateThumbDetails(index) {

      workItemIndex = index;

    }

    //If a current image is the same as the requested image
    function isActive(index) {

      return workItemIndex === index;

    }

    //Randomise an array when called
    function randomizeArray() {
      
      return 0.5 - Math.random();

    }

    //Random number for the anti-spam contact form
    function getRandomNumber() {
      
      //console.log(randomNumber);

      return randomNumber;

    }

    // calling our contact submit function.
    function contactFormSubmit() {

      //console.log(vm.user);

      //console.log(randomNumber);

      var urlBase = 'HTMLResources/php/contact.php';

      vm.errorHeaderMessage = '';
      vm.successHeaderMessage = '';

      // Posting data to php file
      $http({
        method  : 'POST',
        url     : urlBase,
        data    : vm.user, //forms user object
        headers : {
          'Content-Type': 'application/x-www-form-urlencoded'
        },
        cache: false
       })
        .success(function(data) {
          //console.log(data);
          if (data.errors) {
            //console.log(vm.user);
            vm.validationError = true;
            vm.validationSuccess = false;
            vm.errorHeaderMessage = data.errorHeaderMessage;
            vm.errorName = data.errors.name;
            vm.errorEmail = data.errors.email;
            vm.errorMessage = data.errors.message;
            vm.errorNumber = data.errors.human;
          } else {
            vm.validationError = false;
            vm.validationSuccess = true;
            vm.successHeaderMessage = data.successHeaderMessage;
            vm.errorName = '';
            vm.errorEmail = '';
            vm.errorMessage = '';
            vm.errorNumber = '';
            vm.user = {};
          }

        });

    }

    //Initialise full page
    vm.initializeFullpage = initializeFullpage;

		//Get access to dataService object in our view
		vm.dataService = dataService;

		//Work Section - Wrap every 'X' number of work items to force slider
		vm.calculateNumberofSlides = calculateNumberofSlides;

    //Set the ID of the clicked work item
    vm.setWorkItemDetailsId = setWorkItemDetailsId;

    //Click function for retrieving the work item details
    vm.getWorkItemDetails = getWorkItemDetails;

    //Click function for openning the work item details panel
    vm.openWorkItemDetailsPanel = openWorkItemDetailsPanel;

    //Click function for closing the work item details panel
    vm.closeWorkItemDetailsPanel = closeWorkItemDetailsPanel;

    //Show details of selected work item thumbnail
    vm.updateThumbDetails = updateThumbDetails;

    //Set image as the active image
    vm.isActive = isActive;

    //Randomise an array
    vm.randomizeArray = randomizeArray;

    //Generate a random number for the contact page
    vm.getRandomNumber = getRandomNumber;

    //Click function for retrieving contact from submission
    vm.contactFormSubmit = contactFormSubmit;

    // create a blank object to handle form data.
    vm.user = {
      name: '',
      email: '',
      message: '',
      randomnumber: randomNumber,
      human: null
    };

    //Window resized
    /*$(window).resize(function() {
        clearTimeout(resizeId);
        resizeId = setTimeout(doneWindowResize, 500);
    });*/

	}

	//Call the function after ng-repeat in work section has finished
	/*function Loaded() {
  	return {
      scope: { callbackFn: '&' },
      link: function(scope) {

        //console.log('xxx loaded ng repeat in work section xxx');
        scope.callbackFn();
      },
    };
  }*/

  //Call the function after the site has rendered
  function Initialise() {
  	return {
      restrict: 'A',
      scope: { callbackrenderFn: '&' },
      link: function(scope){

        setTimeout(function() {
          //console.log('xxx site has rendered initialise the fullpage plugin xxx');
          scope.callbackrenderFn();
        }, 100); // wait...

      } 
  	};
  }

	angular
		.module('folioFramework')
		.controller('folioCtrl', FolioController)
		//.directive('loadedDirective', Loaded)
		.directive('initializeDirective', Initialise);

	FolioController.$inject = ['dataService', '$http'];

})();
(function() {

	'use strict';

	function DataFactory($http) {

		/*var urlBase = 'http://www.json-generator.com/api/json/get/bQkWdPSKMi?indent=2';*/
		var urlBase = 'HTMLResources/json/folio-data.json?callback=JSON_CALLBACK';

		var JSONHomeSection = [];
		var JSONAboutSection = [];
		var JSONTestimonialSection = [];
		var JSONWorkSection = [];
		var JSONContactSection = [];

		var dataObj = {
			JSONHomeSection: JSONHomeSection,
			JSONAboutSection: JSONAboutSection,
			JSONTestimonialSection: JSONTestimonialSection,
			JSONWorkSection: JSONWorkSection,
			JSONContactSection: JSONContactSection
		};

    $http.get(urlBase).success(function(data) {
        dataObj.JSONHomeSection = data.JSONHomeSection,
        dataObj.JSONAboutSection = data.JSONAboutSection,
        dataObj.JSONTestimonialSection = data.JSONTestimonialSection,
        dataObj.JSONWorkSection = data.JSONWorkSection,
        dataObj.JSONContactSection = data.JSONContactSection;
    });

  	return dataObj;

	}

	angular
		.module('folioFramework')
		.factory('dataService', DataFactory);

	DataFactory.$inject = ['$http'];
		
})();
//# sourceMappingURL=framework.min.js.map

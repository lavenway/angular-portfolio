{"version":3,"sources":["base.js","folio-app.js","controllers/folio.js","factories/dataservice.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"framework.min.js","sourcesContent":["// IIFE - Immediately Invoked Function Expression\n(function(portfolio) {\n  'use strict';\n\n  console.log('portfolio');\n  // The global jQuery object is passed as a parameter\n  portfolio(window.jQuery, window, document);\n\n  }(function($, window, document) {\n      'use strict';\n\n      console.log('window, document');\n      // The $ is now locally scoped \n      $(function() {\n          // The DOM is ready!\n          console.log('inner function from window, document');\n          // This is needed to prevent onreadystatechange being run twice\n          var ready = false;\n\n          document.onreadystatechange = function() {\n            console.log('onreadystatechange');\n            if (ready) {\n              return;\n            }\n            \n            // interactive = DOMContentLoaded & complete = window.load\n            if (document.readyState == 'interactive' || document.readyState == 'complete') {\n              ready = true;\n            }      \n          };\n      });\n\n      // The rest of your code goes here!\n      // Variables\n      var body = $('body'),\n          desktopDevice = 'desktop-viewport',\n          $mainNav = $('.navbar'),\n          mobileDevice = 'mobile-viewport',\n          $mobileMenuToggle = $('.mobile-menu'),\n          tabletDevice = 'tablet-viewport',\n\n          handleMobileNavToggle = function (e) {\n            var $mobileHiddenNav = $('.navbar-links');\n\n            $mainNav.toggleClass('active');\n\n            $mobileHiddenNav.toggle();\n          };\n\n      enquire.register('screen and (max-width:480px)', {\n        // OPTIONAL\n        // If supplied, triggered when a media query matches.\n        match : function() {\n          body.addClass(mobileDevice);\n        },      \n                                    \n        // OPTIONAL\n        // If supplied, triggered when the media query transitions \n        // *from a matched state to an unmatched state*.\n        unmatch : function() {\n          body.removeClass(mobileDevice);\n        },    \n        \n        // OPTIONAL\n        // If supplied, triggered once, when the handler is registered.\n        setup : function() {},    \n                                    \n        // OPTIONAL, defaults to false\n        // If set to true, defers execution of the setup function \n        // until the first time the media query is matched\n        deferSetup : true,\n                                    \n        // OPTIONAL\n        // If supplied, triggered when handler is unregistered. \n        // Place cleanup code here\n        destroy : function() {}         \n      });\n\n      enquire.register('screen and (min-width:481px) and (max-width:1023px)', {\n        // OPTIONAL\n        // If supplied, triggered when a media query matches.\n        match : function() {       \n          body.addClass(tabletDevice);\n        }, \n\n        // OPTIONAL\n        // If supplied, triggered when the media query transitions \n        // *from a matched state to an unmatched state*.\n        unmatch : function() {\n          body.removeClass(tabletDevice);\n        },\n\n        // OPTIONAL\n        // If supplied, triggered once, when the handler is registered.\n        setup : function() {},    \n                                    \n        // OPTIONAL, defaults to false\n        // If set to true, defers execution of the setup function \n        // until the first time the media query is matched\n        deferSetup : true,\n                                    \n        // OPTIONAL\n        // If supplied, triggered when handler is unregistered. \n        // Place cleanup code here\n        destroy : function() {}\n      });\n\n      enquire.register('screen and (min-width:1024px)', {\n        // OPTIONAL\n        // If supplied, triggered when a media query matches.\n        match : function() {\n          body.addClass(desktopDevice);\n        }, \n\n        // OPTIONAL\n        // If supplied, triggered when the media query transitions \n        // *from a matched state to an unmatched state*.\n        unmatch : function() {  \n          body.removeClass(desktopDevice);\n        },\n\n        // OPTIONAL\n        // If supplied, triggered once, when the handler is registered.\n        setup : function() {},    \n                                    \n        // OPTIONAL, defaults to false\n        // If set to true, defers execution of the setup function \n        // until the first time the media query is matched\n        deferSetup : true,\n                                    \n        // OPTIONAL\n        // If supplied, triggered when handler is unregistered. \n        // Place cleanup code here\n        destroy : function() {}\n      });\n\n      // MOBILE NAV TOGGLE MENU\n      $mobileMenuToggle.on('click', handleMobileNavToggle);\n\n  }\n));","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('folioFramework', []);\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction FolioController(dataService) {\n\t\t// VM = Virtual model\n\t\tvar vm = this,\n\t\t\t\tbody = $('body'),\n\t\t\t\tdesktopDevice = 'desktop-viewport',\n\t\t\t\tfullPageOptionsTouchDevice = {\n          anchors: ['section1', 'section2', 'section3', 'section4', 'section5'],\n          controlArrows: false,\n          autoScrolling: false,\n          fitToSection: false,\n          fixedElements: '.navbar',\n          menu: '#menu',\n          //navigation: true,\n          //navigationPosition: 'left',\n          slidesNavigation: true,\n          slidesNavPosition: 'top',\n          afterResize: function(){\n            console.log('after resize');\n            $.fn.fullpage.destroy('all');\n            numberOfSlides();\n          }\n        },\n        fullPageOptionsDesktop = {\n          anchors: ['section1', 'section2', 'section3', 'section4', 'section5'],\n          controlArrows: true,\n          fixedElements: '.navbar',\n          menu: '#menu',\n          navigation: true,\n          navigationPosition: 'left',\n          resize : true,\n          slidesNavigation: true,\n          slidesNavPosition: 'top',\n          afterResize: function(){\n            console.log('after resize');\n            $.fn.fullpage.destroy('all');\n            numberOfSlides();\n          }\n        },\n        fullPage = $('#fullpage'),\n        fullPageSections = $('#fullpage .section'),\n\t\t\t\tmobileDevice = 'mobile-viewport',\n        resizeId,\n        tabletDevice = 'tablet-viewport';\n\n    //Window resizing finished\n    function doneWindowResize(){\n        console.log('window resize finished');\n        initializeFullpage();\n    }\n\n    //Setup full page\n    function initializeFullpage() {\n        console.log('initialise');\n        //$(fullPage).fullpage(fullPageOptions);\n\n        if(body.hasClass(desktopDevice)){\n          console.log('DESKTOP');\n          $(fullPage).fullpage(fullPageOptionsDesktop);\n        } else {\n          $(fullPage).fullpage(fullPageOptionsTouchDevice);\n        }\n    }\n\n\t\t// Update the data attribute with the slide number\n    function setSliderDataAttribute() {\n  \n      var name = 'slide',\n          newname = '',\n          workDataAttributes = $('.section.work .container .slide');\n\n      $(workDataAttributes).each(function(i) {\n        console.log('setting the value of the data attribute');\n        var num = 1,\n            myIndex = num + i;\n\n        myIndex = myIndex++;\n        console.log('myindex ' + myIndex);\n        newname = name + myIndex;\n        console.log('newname ' + newname);\n        \n        $(this).attr('data-anchor', newname);\n      });\n\n    }\n\n    //Work Section - Wrap every 'X' number of work items to force slider\n    function numberOfSlides() {\n      \n      console.log('numberOfSlides() - setup new HTML');\n\n      var maxNumberOfItems,\n          workItemSlider = $('.section.work .container .items'),\n          workItemSlides = $('.section.work .container .slide');\n\n          console.log('number of work items ' + workItemSlider.length);\n\n      function buildSlideHTML() {\n        console.log('building the html');\n        for(var i = 0; i < workItemSlider.length; i+=maxNumberOfItems) {\n          console.log('loop the items and wrap with new HTML');\n          workItemSlider.slice(i, i+maxNumberOfItems).wrapAll('<div class=\"slide\" data-anchor=\"slide1\"></div>');\n        }\n\n        console.log('number of work slides ' + workItemSlides.length);\n      }\n\n      function destroySlideHTML() {\n        console.log('destroy existing HTML');\n\n        $(workItemSlides).replaceWith(function() {\n         return $(workItemSlider, this);\n        });\n\n        buildSlideHTML();\n      }\n\n      if (body.hasClass(mobileDevice)) {\n          console.log('mobile device');\n          maxNumberOfItems = 6;\n          console.log('set max number of items to ' + maxNumberOfItems);\n      } else if (body.hasClass(tabletDevice)) {\n          console.log('tablet device');\n          maxNumberOfItems = 8;\n          console.log('set max number of items to ' + maxNumberOfItems);\n      } else if (body.hasClass(desktopDevice)) {\n          console.log('desktop device');\n          maxNumberOfItems = 18;\n          console.log('set max number of items to ' + maxNumberOfItems);\n      }\n\n      // If the work items are wrapped in the 'slide' HTML then destroy, otherwise rebuild\n      if(workItemSlides.length) {\n        destroySlideHTML();\n      } else {\n        buildSlideHTML();    \n      }\n\n      setSliderDataAttribute();\n  \n    }\n    \n    //Initialise full page\n    vm.initializeFullpage = initializeFullpage;\n\n\t\t//Get access to dataService object in our view\n\t\tvm.dataService = dataService;\n\n\t\t//Work Section - Wrap every 'X' number of work items to force slider\n\t\tvm.numberOfSlides = numberOfSlides;\n\n    //Window resized\n    $(window).resize(function() {\n        clearTimeout(resizeId);\n        resizeId = setTimeout(doneWindowResize, 500);\n    });\n\n\t}\n\n\t//Call the function after ng-repat has finished\n\tfunction Loaded() {\n  \treturn {\n        scope: { callbackFn: '&' },\n        link: function(scope) {\n            console.log('xxx loaded xxx');\n            scope.callbackFn();\n        },\n    };\n  }\n\n  //Call the function after the site has rendered\n  function Initialise() {\n  \treturn {\n      restrict: 'A',\n      scope: { callbackrenderFn: '&' },\n      link: function(scope){\n\n        $(window).load(function() {\n          console.log('xxx rendered xxx');\n          scope.callbackrenderFn();\n        });\n      }\n  \t};\n  }\n\n\tangular\n\t\t.module('folioFramework')\n\t\t.controller('folioCtrl', FolioController)\n\t\t.directive('loadedDirective', Loaded)\n\t\t.directive('initializeDirective', Initialise);\n\n\tFolioController.$inject = ['dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction DataFactory($http) {\n\n\t\t/*var urlBase = 'http://www.json-generator.com/api/json/get/bQkWdPSKMi?indent=2';*/\n\t\tvar urlBase = 'HTMLResources/json/folio-data.json?callback=JSON_CALLBACK';\n\n\t\tvar JSONHomeSection = [];\n\t\tvar JSONAboutSection = [];\n\t\tvar JSONAgenciesSection = [];\n\t\tvar JSONWorkSection = [];\n\t\tvar JSONContactSection = [];\n\n\t\tvar dataObj = {\n\t\t\tJSONHomeSection: JSONHomeSection,\n\t\t\tJSONAboutSection: JSONAboutSection,\n\t\t\tJSONAgenciesSection: JSONAgenciesSection,\n\t\t\tJSONWorkSection: JSONWorkSection,\n\t\t\tJSONContactSection: JSONContactSection\n\t\t};\n\n    $http.get(urlBase).success(function(data) {\n        dataObj.JSONHomeSection = data.JSONHomeSection,\n        dataObj.JSONAboutSection = data.JSONAboutSection,\n        dataObj.JSONAgenciesSection = data.JSONAgenciesSection,\n        dataObj.JSONWorkSection = data.JSONWorkSection,\n        dataObj.JSONContactSection = data.JSONContactSection;\n    });\n\n  \treturn dataObj;\n\n\n\t}\n\n\tangular\n\t\t.module('folioFramework')\n\t\t.factory('dataService', DataFactory);\n\n\tDataFactory.$inject = ['$http'];\n\t\t\n})();"],"sourceRoot":"/source/"}
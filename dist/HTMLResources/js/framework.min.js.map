{"version":3,"sources":["base.js","folio-app.js","controllers/folio.js","factories/dataservice.js"],"names":[],"mappingszOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"framework.min.js","sourcesContent":["// IIFE - Immediately Invoked Function Expression\n(function(portfolio) {\n  'use strict';\n\n  //console.log('portfolio');\n  // The global jQuery object is passed as a parameter\n  portfolio(window.jQuery, window, document);\n\n  }(function($, window, document) {\n      'use strict';\n\n      //console.log('window, document');\n      // The $ is now locally scoped \n      $(function() {\n          // The DOM is ready!\n          //console.log('inner function from window, document');\n          // This is needed to prevent onreadystatechange being run twice\n          var ready = false;\n\n          document.onreadystatechange = function() {\n            //console.log('onreadystatechange');\n            if (ready) {\n              return;\n            }\n            \n            // interactive = DOMContentLoaded & complete = window.load\n            if (document.readyState == 'interactive' || document.readyState == 'complete') {\n              ready = true;\n            }\n          };\n      });\n\n      // The rest of your code goes here!\n      // Variables\n      var body = $('body'),\n          desktopDevice = 'desktop-viewport',\n          $mainNav = $('.navbar'),\n          mobileDevice = 'mobile-viewport',\n          $mobileHiddenNav = $('.navbar-links'),\n          $mobileMenuToggle = $('.mobile-menu'),\n          tabletDevice = 'tablet-viewport',\n\n          handleMobileNavToggle = function () {\n            $mainNav.toggleClass('navbar-active');\n\n            $mobileHiddenNav.toggle();\n          },\n\n          handleScrollDetection = function () {\n\n            body.addClass('scroll-active');\n\n            clearTimeout($.data(this, 'scrollTimer'));\n\n            $.data(this, 'scrollTimer', setTimeout(function() {\n                body.removeClass('scroll-active');\n            }, 1000));\n\n          };\n\n      enquire.register('screen and (max-width:480px)', {\n        // OPTIONAL\n        // If supplied, triggered when a media query matches.\n        match : function() {\n          body.addClass(mobileDevice);\n        },      \n                                    \n        // OPTIONAL\n        // If supplied, triggered when the media query transitions \n        // *from a matched state to an unmatched state*.\n        unmatch : function() {\n          body.removeClass(mobileDevice);\n        },    \n        \n        // OPTIONAL\n        // If supplied, triggered once, when the handler is registered.\n        setup : function() {},    \n                                    \n        // OPTIONAL, defaults to false\n        // If set to true, defers execution of the setup function \n        // until the first time the media query is matched\n        deferSetup : true,\n                                    \n        // OPTIONAL\n        // If supplied, triggered when handler is unregistered. \n        // Place cleanup code here\n        destroy : function() {}         \n      });\n\n      enquire.register('screen and (min-width:481px) and (max-width:1023px)', {\n        // OPTIONAL\n        // If supplied, triggered when a media query matches.\n        match : function() {       \n          body.addClass(tabletDevice);\n          $mobileHiddenNav.removeAttr('style');\n        }, \n\n        // OPTIONAL\n        // If supplied, triggered when the media query transitions \n        // *from a matched state to an unmatched state*.\n        unmatch : function() {\n          body.removeClass(tabletDevice);\n        },\n\n        // OPTIONAL\n        // If supplied, triggered once, when the handler is registered.\n        setup : function() {},    \n                                    \n        // OPTIONAL, defaults to false\n        // If set to true, defers execution of the setup function \n        // until the first time the media query is matched\n        deferSetup : true,\n                                    \n        // OPTIONAL\n        // If supplied, triggered when handler is unregistered. \n        // Place cleanup code here\n        destroy : function() {}\n      });\n\n      enquire.register('screen and (min-width:1024px)', {\n        // OPTIONAL\n        // If supplied, triggered when a media query matches.\n        match : function() {\n          body.addClass(desktopDevice);\n          $mobileHiddenNav.removeAttr('style');\n        }, \n\n        // OPTIONAL\n        // If supplied, triggered when the media query transitions \n        // *from a matched state to an unmatched state*.\n        unmatch : function() {  \n          body.removeClass(desktopDevice);\n        },\n\n        // OPTIONAL\n        // If supplied, triggered once, when the handler is registered.\n        setup : function() {},    \n                                    \n        // OPTIONAL, defaults to false\n        // If set to true, defers execution of the setup function \n        // until the first time the media query is matched\n        deferSetup : true,\n                                    \n        // OPTIONAL\n        // If supplied, triggered when handler is unregistered. \n        // Place cleanup code here\n        destroy : function() {}\n      });\n\n      // MOBILE NAV TOGGLE MENU\n      $mobileMenuToggle.on('click', handleMobileNavToggle);\n\n      // WINDOW SCROLL DETECTION\n      $(window).on('scroll', handleScrollDetection);\n\n  }\n));","(function() {\n\n\t'use strict';\n\n\tangular\n\t\t.module('folioFramework', []);\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction FolioController(dataService) {\n\t\t// VM = Virtual model\n\t\tvar vm = this,\n\t\t\t\t$body = $('body'),\n\t\t\t\tdesktopDevice = 'desktop-viewport',\n\t\t\t\t$fullPageOptionsTouchDevice = {\n          anchors: ['firstPage', 'secondPage', 'thirdPage', 'fourthPage', 'lastPage'],\n          controlArrows: true,\n          autoScrolling: false,\n          fitToSection: false,\n          fixedElements: '.navbar',\n          menu: '#menu',\n          slidesNavigation: false,\n          slidesNavPosition: 'bottom',\n          afterResize: function(){\n            //console.log('after resize');\n            $.fn.fullpage.destroy('all');\n            numberOfSlides();\n          }\n        },\n        $fullPageOptionsDesktop = {\n          anchors: ['firstPage', 'secondPage', 'thirdPage', 'fourthPage', 'lastPage'],\n          controlArrows: true,\n          autoScrolling: false,\n          scrollBar: true,\n          fitToSection: true,\n          fixedElements: '.navbar',\n          menu: '#menu',\n          navigation: true,\n          navigationPosition: 'left',\n          resize : true,\n          slidesNavigation: false,\n          slidesNavPosition: 'bottom',\n          afterResize: function(){\n            //console.log('after resize');\n            $.fn.fullpage.destroy('all');\n            numberOfSlides();\n          }\n        },\n        $fullPage = $('#fullpage'),\n\t\t\t\tmobileDevice = 'mobile-viewport',\n        resizeId,\n        tabletDevice = 'tablet-viewport',\n        workItemID = 0,\n        panelActive = false;\n\n    //Window resizing finished\n    function doneWindowResize(){\n      //console.log('window resize finished');\n      initializeFullpage();\n    }\n\n    //Setup full page\n    function initializeFullpage() {\n      //console.log('initialise');\n\n      if($body.hasClass(desktopDevice)){\n        //console.log('DESKTOP');\n        $fullPage.fullpage($fullPageOptionsDesktop);\n      } else {\n        $fullPage.fullpage($fullPageOptionsTouchDevice);\n      }\n    }\n\n    //Work Section - Wrap every 'X' number of work items to force slider\n    function numberOfSlides() {\n      \n      //console.log('numberOfSlides() - setup new HTML');\n\n      var maxNumberOfItems,\n          workItemSlider = $('.section.work .container .items'),\n          workItemSlides = $('.section.work .container .slide');\n\n          //console.log('number of work items ' + workItemSlider.length);\n\n      function buildSlideHTML() {\n        //console.log('building the html');\n        for(var i = 0; i < workItemSlider.length; i+=maxNumberOfItems) {\n          //console.log('loop the items and wrap with new HTML');\n          workItemSlider.slice(i, i+maxNumberOfItems).wrapAll('<div class=\"slide\"></div>');\n        }\n\n        //console.log('number of work slides ' + workItemSlides.length);\n      }\n\n      function destroySlideHTML() {\n        //console.log('destroy existing HTML');\n\n        $(workItemSlides).replaceWith(function() {\n         return $(workItemSlider, this);\n        });\n\n        buildSlideHTML();\n      }\n\n      if ($body.hasClass(mobileDevice)) {\n        //console.log('mobile device');\n        maxNumberOfItems = 6;\n        //console.log('set max number of items to ' + maxNumberOfItems);\n      } else if ($body.hasClass(tabletDevice)) {\n        //console.log('tablet device');\n        maxNumberOfItems = 9;\n        //console.log('set max number of items to ' + maxNumberOfItems);\n      } else if ($body.hasClass(desktopDevice)) {\n        //console.log('desktop device');\n        maxNumberOfItems = 12;\n        //console.log('set max number of items to ' + maxNumberOfItems);\n      }\n\n      // If the work items are wrapped in the 'slide' HTML then destroy, otherwise rebuild\n      if(workItemSlides.length) {\n        destroySlideHTML();\n      } else {\n        buildSlideHTML();    \n      }\n  \n    }\n\n    //Get work item details\n    function getWorkItemDetails(workItem) {\n\n      if (panelActive === true) {\n\n        if (workItem !== undefined) {\n          //console.log(workItem.itemId);\n          return workItem.itemId == workItemID;\n        }\n\n      }\n\n    }\n\n    //Set the ID of the clicked work item\n    function setWorkItemDetailsId(work) {\n\n      workItemID = work.itemId;\n\n      //console.log('work item id is: ' + work.itemId);\n\n      //document.getElementById('jsonWorkID').value = workItemID;\n\n      getWorkItemDetails();\n\n    }\n\n    //Open work item details panel\n    function openWorkItemDetailsPanel($event) {\n      \n      $event.preventDefault();\n\n      panelActive = true;\n\n      //console.log(panelActive);\n\n    }\n\n    //Close work item details panel\n    function closeWorkItemDetailsPanel($event) {\n      \n      $event.preventDefault();\n\n      panelActive = false;\n\n    }\n\n    //Initialise full page\n    vm.initializeFullpage = initializeFullpage;\n\n\t\t//Get access to dataService object in our view\n\t\tvm.dataService = dataService;\n\n\t\t//Work Section - Wrap every 'X' number of work items to force slider\n\t\tvm.numberOfSlides = numberOfSlides;\n\n    //Set the ID of the clicked work item\n    vm.setWorkItemDetailsId = setWorkItemDetailsId;\n\n    //Click function for retrieving the work item details\n    vm.getWorkItemDetails = getWorkItemDetails;\n\n    //Click function for openning the work item details panel\n    vm.openWorkItemDetailsPanel = openWorkItemDetailsPanel;\n\n    //Click function for closing the work item details panel\n    vm.closeWorkItemDetailsPanel = closeWorkItemDetailsPanel;\n\n    //Window resized\n    $(window).resize(function() {\n        clearTimeout(resizeId);\n        resizeId = setTimeout(doneWindowResize, 500);\n    });\n\n\t}\n\n\t//Call the function after ng-repat has finished\n\tfunction Loaded() {\n  \treturn {\n      scope: { callbackFn: '&' },\n      link: function(scope) {\n        //console.log('xxx loaded xxx');\n        scope.callbackFn();\n      },\n    };\n  }\n\n  //Call the function after the site has rendered\n  function Initialise() {\n  \treturn {\n      restrict: 'A',\n      scope: { callbackrenderFn: '&' },\n      link: function(scope){\n\n        $(window).load(function() {\n          //console.log('xxx rendered xxx');\n          scope.callbackrenderFn();\n        });\n\n      }\n  \t};\n  }\n\n\tangular\n\t\t.module('folioFramework')\n\t\t.controller('folioCtrl', FolioController)\n\t\t.directive('loadedDirective', Loaded)\n\t\t.directive('initializeDirective', Initialise);\n\n\tFolioController.$inject = ['dataService'];\n\n})();","(function() {\n\n\t'use strict';\n\n\tfunction DataFactory($http) {\n\n\t\t/*var urlBase = 'http://www.json-generator.com/api/json/get/bQkWdPSKMi?indent=2';*/\n\t\tvar urlBase = 'HTMLResources/json/folio-data.json?callback=JSON_CALLBACK';\n\n\t\tvar JSONHomeSection = [];\n\t\tvar JSONAboutSection = [];\n\t\tvar JSONTestimonialSection = [];\n\t\tvar JSONWorkSection = [];\n\t\tvar JSONContactSection = [];\n\n\t\tvar dataObj = {\n\t\t\tJSONHomeSection: JSONHomeSection,\n\t\t\tJSONAboutSection: JSONAboutSection,\n\t\t\tJSONTestimonialSection: JSONTestimonialSection,\n\t\t\tJSONWorkSection: JSONWorkSection,\n\t\t\tJSONContactSection: JSONContactSection\n\t\t};\n\n    $http.get(urlBase).success(function(data) {\n        dataObj.JSONHomeSection = data.JSONHomeSection,\n        dataObj.JSONAboutSection = data.JSONAboutSection,\n        dataObj.JSONTestimonialSection = data.JSONTestimonialSection,\n        dataObj.JSONWorkSection = data.JSONWorkSection,\n        dataObj.JSONContactSection = data.JSONContactSection;\n    });\n\n  \treturn dataObj;\n\n\t}\n\n\tangular\n\t\t.module('folioFramework')\n\t\t.factory('dataService', DataFactory);\n\n\tDataFactory.$inject = ['$http'];\n\t\t\n})();"],"sourceRoot":"/source/"}